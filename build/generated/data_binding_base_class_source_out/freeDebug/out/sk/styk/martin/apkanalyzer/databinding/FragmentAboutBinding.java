// Generated by data binding compiler. Do not edit!
package sk.styk.martin.apkanalyzer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import java.lang.Deprecated;
import java.lang.Object;
import sk.styk.martin.apkanalyzer.R;
import sk.styk.martin.apkanalyzer.ui.about.AboutFragmentViewModel;

public abstract class FragmentAboutBinding extends ViewDataBinding {
  @NonNull
  public final TextView aboutAppAuthors;

  @NonNull
  public final TextView aboutAppDependencies;

  @NonNull
  public final TextView aboutAppGithubLink;

  @NonNull
  public final TextView aboutAppName;

  @NonNull
  public final TextView aboutAppPrivacyPolicy;

  @NonNull
  public final MaterialButton aboutAppRate;

  @NonNull
  public final TextView aboutAppVersion;

  @NonNull
  public final AppBarLayout appBar;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline guideline;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView logo;

  @NonNull
  public final MaterialToolbar toolbar;

  @Bindable
  protected AboutFragmentViewModel mViewModel;

  protected FragmentAboutBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextView aboutAppAuthors, TextView aboutAppDependencies, TextView aboutAppGithubLink,
      TextView aboutAppName, TextView aboutAppPrivacyPolicy, MaterialButton aboutAppRate,
      TextView aboutAppVersion, AppBarLayout appBar, Guideline guideline, ImageView logo,
      MaterialToolbar toolbar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.aboutAppAuthors = aboutAppAuthors;
    this.aboutAppDependencies = aboutAppDependencies;
    this.aboutAppGithubLink = aboutAppGithubLink;
    this.aboutAppName = aboutAppName;
    this.aboutAppPrivacyPolicy = aboutAppPrivacyPolicy;
    this.aboutAppRate = aboutAppRate;
    this.aboutAppVersion = aboutAppVersion;
    this.appBar = appBar;
    this.guideline = guideline;
    this.logo = logo;
    this.toolbar = toolbar;
  }

  public abstract void setViewModel(@Nullable AboutFragmentViewModel viewModel);

  @Nullable
  public AboutFragmentViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static FragmentAboutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_about, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentAboutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentAboutBinding>inflateInternal(inflater, R.layout.fragment_about, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentAboutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_about, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentAboutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentAboutBinding>inflateInternal(inflater, R.layout.fragment_about, null, false, component);
  }

  public static FragmentAboutBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentAboutBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentAboutBinding)bind(component, view, R.layout.fragment_about);
  }
}
